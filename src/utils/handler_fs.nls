

extensions [ rnd ]


;; ------------------------------------------------------------------------------------------------------------------------------
;; WEIGHTED SAMPLING METHODs

;; draw a random node with HIGHER probability for those nodes with a LOWER NUMBER OF LINKS
;; return the turtle ID
to-report weighted_draw_unknown_nodes
  ;; (1) define the pairs (node_id, inverted prob based on num_links)
  let inverse_probs map_id_inverse_prob
  ;; (2) weighted sampling
  report first rnd:weighted-one-of-list inverse_probs [ [x] -> last x ]
end

;; weight MORE the INFECTED nodes 
to-report draw_weighted_infected_node
  ;; once having assigned to each turtle_id an integer stating its infection status (higher for infected nodes)
  ;; weight it wrt to the number of links 

  let inverse_probs map_id_pol_prob_inverse ;map_id_inverse_prob
  let inverse_probs_with_contagion map [ i -> (list (first i) (weight_prob_with_contagion i))] inverse_probs
  
  ;; normalize
  let normalized_probs normalize_probabilities inverse_probs_with_contagion
  let sample first rnd:weighted-one-of-list normalized_probs [ [x] -> last x ]
  report retrieve_turtle_by_id sample
end

;; weight more nodes with low polarization in absolute value
to-report draw_low_pol_node [start_node]
  let map_contagion map_id_prob_same_party start_node
  let sample first rnd:weighted-one-of-list map_contagion [ [x] -> last x ]
  report retrieve_turtle_by_id sample
end

to-report draw_weighted_polarization
  ; higher probability for higher polarized nodes
  ;let map_contagion map_id_pol_prob
  ; higher probability for lower polarized nodes
  let map_contagion map_id_pol_prob_inverse
  
  let sample first rnd:weighted-one-of-list map_contagion [ [x] -> last x ]
  report retrieve_turtle_by_id sample
end


;; weight MORE the NON-INFECTED nodes between the neighbors of the given node
;; return a relatively weighted sample or the best one (in absolute terms)
;; the considered nodes share the same political opinions with the starting node
to-report draw_weighted_unknown [start_node strategy]

  ifelse strategy = "random" [
    ;; RANDOM
    ;; random with higher prob for healthy node (probability not affected by the number of friends)
    let map_contagion map_id_prob_any_party start_node
    let sample first rnd:weighted-one-of-list map_contagion [ [x] -> last x ]
    report retrieve_turtle_by_id sample
  ][
    ifelse strategy = "same" [
      ;; SAME PARTY
      let map_contagion map_id_prob_same_party start_node
      let sample first rnd:weighted-one-of-list map_contagion [ [x] -> last x ]
      report retrieve_turtle_by_id sample
    ][
      ;; DIFFERENT PARTY
      let map_contagion map_id_prob_different_party start_node
      let sample first rnd:weighted-one-of-list map_contagion [ [x] -> last x ]
      report retrieve_turtle_by_id sample
    ]
  ]
end

to-report draw_weighted_unknown_listeners_only [start_node strategy]
  let map_contagion nobody
  ifelse strategy = "random" [
    ;; RANDOM
    ;; random with higher prob for healthy node (probability not affected by the number of friends)
    set map_contagion map_id_prob_any_party_listeners_only start_node
  ][
    ifelse strategy = "same" [
      ;; SAME PARTY
      set map_contagion map_id_prob_same_party_listeners_only start_node
    ][
      ;; DIFFERENT PARTY
      set map_contagion map_id_prob_different_party_listeners_only start_node
    ]
  ]
  
  ifelse (empty? map_contagion)[
    report nobody
  ][
    let sample first rnd:weighted-one-of-list map_contagion [ [x] -> last x ]
    report retrieve_turtle_by_id sample
  ]
end

;; ------------------------------------------------------------------------------------------------------------------------------
;; FIND LINK WITH SPECIFIC FEATURES


;; Drop connection with nodes having the most different opinion
to-report draw_link2drop
    let target_node nobody
    
    ifelse (connection_drop_strategy = "random")[
      set target_node one-of turtles with [count link-neighbors > 1]
    ][
      let rand_node one-of turtles with [count link-neighbors > 1]
      set target_node draw_low_pol_node rand_node;draw_weighted_infected_node   
    ]

    report one-of [my-links] of target_node
end

;; return weight proportional to polarization distance and number of neighbors
to-report get_dist_and_plus_pop [node_1 node_2]
  let pol_1 [polarization-weight] of node_1
  let pol_2 [polarization-weight] of node_2
  let pop_2 [count link-neighbors] of node_2
  let pol_diff -1

  ifelse (((pol_1 < 0) and (pol_2 > 0)) or ((pol_1 > 0) and (pol_2 < 0))) [
    set pol_diff ( abs(pol_1) + abs(pol_2) )
  ][
    set pol_diff abs( abs(pol_1) - abs(pol_2) )
  ]

  set pol_diff ( pol_diff + pop_2)

  report pol_diff
end


to-report draw_link2drop_opp_opinion [this_node]
  let target_node nobody
  
  ifelse (connection_drop_strategy = "random")[
    let my_party [party] of this_node
    set target_node one-of turtles with [(link-neighbor? this_node) and (party != my_party) and (count link-neighbors > 1)]
  ][
    ifelse (connection_drop_strategy = "popularity_based")[
      let my_party [party] of this_node
      set target_node max-one-of turtles with [(link-neighbor? this_node) and (party != my_party) and (count link-neighbors > 1)] [get_dist_and_plus_pop this_node self]
    ][
      ;; unpop nodes
      let my_party [party] of this_node
      set target_node min-one-of turtles with [(link-neighbor? this_node) and (party != my_party) and (count link-neighbors > 1)] [get_dist_and_plus_pop this_node self]
    ]
  ]

  let link2drop nobody
  if (target_node != nobody)[
    set link2drop one-of [my-links] of target_node
  ]
  
  report link2drop
end

to-report draw_link2drop_listeners [this_node]
  let target_node nobody
  
  ifelse (connection_drop_strategy = "random")[
    set target_node one-of turtles with [(link-neighbor? this_node) and (count link-neighbors > 1) and (role = 0)]
  ][
    ifelse (connection_drop_strategy = "popularity_based")[
      let my_party [party] of this_node
      set target_node max-one-of turtles with [(link-neighbor? this_node) and (count link-neighbors > 1) and (role = 0)] [get_dist_and_plus_pop this_node self]
    ][
      ;; unpop nodes
      let my_party [party] of this_node
      set target_node min-one-of turtles with [(link-neighbor? this_node) and (count link-neighbors > 1) and (role = 0)] [get_dist_and_plus_pop this_node self]
    ]
  ]

  let link2drop nobody
  if (target_node != nobody)[
    let feasible_nodes turtles with [(link-neighbor? target_node) and (role = 0)]
    if (any? feasible_nodes)[
      let dest_node one-of feasible_nodes
      set link2drop [link-with dest_node] of target_node
    ]
  ]
  
  report link2drop
end


;; ------------------------------------------------------------------------------------------------------------------------
;; FIND A NODE WITH SPECIFIC FEATURES

to-report draw_chosen_node
  ;report draw_unknown_nodes
  report draw_weighted_polarization
end

;; return a turtle by weighting the sampling using the polarization weight
;; weight MORE the nodes with LOWER polarization weight
to-report draw_unknown_nodes
  report min-one-of turtles [polarization-weight]
end

;; draw a listner node
to-report draw_chosen_node_listners
  report one-of turtles with [(role = 0) and (not resistant?)]
end


;; return a neighbouring node with low 
to-report draw-neigh-low-pol-dist-node [this_node]
  let my_polarization_weight [polarization-weight] of this_node
  
  report min-one-of turtles with [(link-neighbor? this_node)] [get_polarization_distance this_node self]
end

to-report draw-neigh-high-pol-dist-node [this_node]
  let mine_polarization_weight [polarization-weight] of this_node
  report max-one-of turtles with [(link-neighbor? this_node)] [get_polarization_distance this_node self]
end

;link-neighbor? my_neigh)                            
;any? link-neighbors this_node with [link-neighbor? myself]

;; draw neighbors or neighbors of neighbors != my self
to-report draw-communicating-node [this_node]
  ;let my_neigh turtles with [(link-neighbor? this_node)]
  ;let my_neigh [link-neighbors] of this_node
  report one-of turtles with [(
                              (link-neighbor? this_node) 
                              or 
                              (
                                (not link-neighbor? this_node) 
                                and 
                                (any? link-neighbors with [link-neighbor? this_node])
                              ) 
                              and 
                              (self != this_node)
                            )] 
end


; find partner using preferentila attachment 
; consider only nodes belonging to the same political party
; if wavering than go random
to-report find-partner
  report [one-of both-ends with [count link-neighbors <= max_number_of_connections]] of one-of links
end

;; return a new partner according to the given turtle being cooperative or not
;; this influences how the individuals with more friends are weighted
to-report find-partner_coop ;; turtle-function
  let starting_node self
  ifelse cooperative?[
    ;; the choice is influenced by the given "connection_making_strategy"
    ifelse (connection_making_strategy = "absolute popularity")[
      ;; choose the most popular individual among those not already known to the chosen "starting_node"
      report max-one-of (turtles with [(count link-neighbors <= max_number_of_connections) and (not link-neighbor? starting_node) and (myself != self)]) [count link-neighbors]
    ][
      ifelse (connection_making_strategy = "relative popularity")[
      ;; weighted sampling
      report [one-of (both-ends with [(count link-neighbors <= max_number_of_connections) and (not link-neighbor? starting_node) and (myself != self)])] of one-of links
    ][
      ;; RANDOM
      report one-of turtles with [(count link-neighbors <= max_number_of_connections) and (not link-neighbor? starting_node) and (myself != self)] 
    ]]
  ][
    ;; preferential attachment
    report [one-of both-ends with [(count link-neighbors <= max_number_of_connections) and (not link-neighbor? starting_node) and (myself != self)]] of one-of links
  ]
end


to-report draw_new_popular_friend [starting_node]
  ;; return a node not already known to the input individual
  ;; with popularity >= starting_node's pop
  let mine_popularity [count link-neighbors] of starting_node

  ;; the choice is influenced by the given "connection_making_strategy"
  ifelse (connection_making_strategy = "absolute popularity")[
    ;; choose the most popular individual among those not already known to the chosen "starting_node"
    report max-one-of (turtles with [(count link-neighbors > mine_popularity) and (count link-neighbors <= max_number_of_connections) and (not link-neighbor? starting_node) and (myself != starting_node)]) [count link-neighbors]
  ][
    ifelse (connection_making_strategy = "relative popularity")[
      ;; weighted sampling
      report [one-of (both-ends with [(count link-neighbors > mine_popularity) and (count link-neighbors <= max_number_of_connections) and (not link-neighbor? starting_node) and (myself != starting_node)])] of one-of links
    ][
      ;; RANDOM
      report one-of turtles with [(count link-neighbors <= max_number_of_connections) and (not link-neighbor? starting_node) and (myself != starting_node)] 
    ]
  ]
end


;; Make a new connection with a node having the same political view
;; and with a lot of friends (popular/influencing)
to-report draw_new_interaction_old [starting_node]
  ;; the choice is influenced by the given "connection_making_strategy"
  ifelse (connection_making_strategy = "absolute popularity")[
    ;; choose the most popular individual among those not already known to the chosen "starting_node"
    report draw_weighted_unknown starting_node "absolute"
  ][
    ifelse (connection_making_strategy = "relative popularity")[
      ;; weighted sampling between nodes with popularity >= "chosen_node_popularity"
      report draw_weighted_unknown starting_node "relative"
    ][
      ;; RANDOM
      report draw_weighted_unknown starting_node "random"
    ]
  ]
end

to-report draw_new_interaction [starting_node]
  ifelse (connection_making_strategy = "same party")[
    report draw_weighted_unknown starting_node "same"
  ][
    ifelse (connection_making_strategy = "different party")[
      report draw_weighted_unknown starting_node "different"
    ][
      ;; RANDOM
      report draw_weighted_unknown starting_node "random"
    ]
  ]
end


to-report draw_new_interaction_listeners_only [starting_node]
  ifelse (connection_making_strategy = "same party")[
    report draw_weighted_unknown_listeners_only starting_node "same"
  ][
    ifelse (connection_making_strategy = "different party")[
      report draw_weighted_unknown_listeners_only starting_node "different"
    ][
      ;; RANDOM
      report draw_weighted_unknown_listeners_only starting_node "random"
    ]
  ]
end


;; ------------------------------------------------------------------------------------------------------------------------
;; BUILD LIST OF NODE IDs AND PROBs

;; return pair[turtle_id, prob] with higher probability for nodes having higher polarization_weight
to-report map_id_pol_prob
  let ids [who] of turtles
  let prob_pairs (map [ [ a b ] -> ( list a  ([abs(polarization-weight)] of turtles with [who = a])) ] ids ids)
  ;; normalize the probability measures before returing the resulting list of pairs
  report normalize_probabilities prob_pairs
end

;; return pair[turtle_id, prob] with higher probability for nodes having lower polarization_weight
to-report map_id_pol_prob_inverse
  let ids [who] of turtles with [count link-neighbors > 1] ; avoid to create separate clusters when dropping their unique link
  let prob_pairs (map [ [ a b ] -> ( list a  ([1 - abs(polarization-weight)] of turtles with [who = a])) ] ids ids)
  ;; normalize the probability measures before returing the resulting list of pairs
  report normalize_probabilities prob_pairs
end


;; pair [turtle_id, prob] where prob is INVERSELY proportional to the number of neighbors
to-report map_id_inverse_prob
  let ids [who] of turtles
  let tot_link count links + 1 ; +1 to correctly cope with nets with a node connected to all the others

  let count_id_map (map [ [ a b ] -> ( list a  (count_neigh a)) ] ids ids)
  ;; compute probability and reverse the value to weight more those nodes with a small number of links
  let prob_pairs (map [ i -> (list (first i) (1 - ((last i) / tot_link)))] count_id_map)
  ;; normalize the probability measures before returing the resulting list of pairs
  report normalize_probabilities prob_pairs
end


;; WEIGHT = (| POLARIZATION_IDS | ) * num_interactions
to-report map_id_prob_same_party_w_popularity [start_node]
  let ids [who] of turtles 
  let my_political_view [party] of start_node
  let tot_link count links + 1 ; +1 to correctly cope with nets with a node connected to all the others

  ifelse my_political_view = 1[
    ;; waving individuals can bond with nodes from both parties
    let search_space_ids [who] of turtles with [(not link-neighbor? start_node) and (count link-neighbors < max_number_of_connections)]
  ][
    ;; select nodes beloging to the considered party only
    let search_space_ids [who] of turtles with [(not link-neighbor? start_node) and (party = my_political_view) and (count link-neighbors < max_number_of_connections)]
  ]

  let contagion_id_map (map [ [ a b ] -> ( list a  ([(abs(polarization-weight)) * (count link-neighbors)] of turtles with [who = a])) ] ids ids)
  ;let prob_pairs (map [ i -> (list (first i) ((last (last i)) / count turtles))] contagion_id_map)
  let prob_pairs (map [ i -> (list (first i) (list ((last (last i)) / count turtles)))] contagion_id_map)
  
  ;; normalize the probability measures before returing the resulting list of pairs
  report normalize_probabilities prob_pairs
end

;; pair [turtle ID, propability value] for nodes with the same political view
;; and weighting more those having high polarization weight in absolute value
to-report map_id_prob_same_party [start_node]
  let my_political_view [party] of start_node
  let search_space_ids nobody
  
  ifelse my_political_view = 1[
    ;; waving individuals can bond with nodes from both parties
    set search_space_ids [who] of turtles with [(not link-neighbor? start_node) and (count link-neighbors < max_number_of_connections)]
  ][
    ;; select nodes beloging to the considered party only
    set search_space_ids [who] of turtles with [(not link-neighbor? start_node) and (party = my_political_view) and (count link-neighbors < max_number_of_connections)]
  ]

  let contagion_id_map (map [ [ a b ] -> ( list a  ([abs(polarization-weight)] of turtles with [who = a])) ] search_space_ids search_space_ids)
  let prob_pairs (map [ i -> (list (first i) (list ((last (last i)) / count turtles)))] contagion_id_map)
  ;; normalize the probability measures before returing the resulting list of pairs
  report normalize_probabilities prob_pairs
end


to-report map_id_prob_different_party [start_node]
  let my_political_view [party] of start_node
  let search_space_ids nobody
  
  ifelse my_political_view = 1[
    ;; waving individuals can bond with nodes from both parties
    set search_space_ids [who] of turtles with [(not link-neighbor? start_node) and (count link-neighbors < max_number_of_connections)]
  ][
    ;; select nodes beloging to the considered party only
    set search_space_ids [who] of turtles with [(not link-neighbor? start_node) and (party != my_political_view) and (count link-neighbors < max_number_of_connections)]
  ]

  let contagion_id_map (map [ [ a b ] -> ( list a  ([abs(polarization-weight)] of turtles with [who = a])) ] search_space_ids search_space_ids)
  let prob_pairs (map [ i -> (list (first i) (list ((last (last i)) / count turtles)))] contagion_id_map)
  ;; normalize the probability measures before returing the resulting list of pairs
  report normalize_probabilities prob_pairs
end

to-report map_id_prob_any_party [start_node]
  let my_political_view [party] of start_node
  let ids [who] of turtles
  
  let contagion_id_map (map [ [ a b ] -> ( list a  ([abs(polarization-weight)] of turtles with [who = a])) ] ids ids)
  let prob_pairs (map [ i -> (list (first i) (list ((last (last i)) / count turtles)))] contagion_id_map)
  ;; normalize the probability measures before returing the resulting list of pairs
  report normalize_probabilities prob_pairs
end


;; --------------------------------------------------------------------------------------

to-report map_id_prob_same_party_listeners_only [start_node]
  let my_political_view [party] of start_node
  let search_space_ids nobody

  ifelse my_political_view = 1[
    ;; waving individuals can bond with nodes from both parties
    set search_space_ids [who] of turtles with [(not link-neighbor? start_node) and (count link-neighbors < max_number_of_connections) and (role = 0)]
  ][
    ;; select nodes beloging to the considered party only
    set search_space_ids [who] of turtles with [(not link-neighbor? start_node) and (party = my_political_view) and (count link-neighbors < max_number_of_connections) and (role = 0)]
  ]

  let contagion_id_map (map [ [ a b ] -> ( list a  ([abs(polarization-weight)] of turtles with [who = a])) ] search_space_ids search_space_ids)
  let prob_pairs (map [ i -> (list (first i) (list ((last (last i)) / count turtles)))] contagion_id_map)
  ;; normalize the probability measures before returing the resulting list of pairs
  report normalize_probabilities prob_pairs
end


to-report map_id_prob_different_party_listeners_only [start_node]
  let my_political_view [party] of start_node
  let search_space_ids nobody
  
  ifelse my_political_view = 1[
    ;; waving individuals can bond with nodes from both parties
    set search_space_ids [who] of turtles with [(not link-neighbor? start_node) and (count link-neighbors < max_number_of_connections) and (role = 0)]
  ][
    ;; select nodes beloging to the considered party only
    set search_space_ids [who] of turtles with [(not link-neighbor? start_node) and (party != my_political_view) and (count link-neighbors < max_number_of_connections) and (role = 0)]
  ]

  let contagion_id_map (map [ [ a b ] -> ( list a  ([abs(polarization-weight)] of turtles with [who = a])) ] search_space_ids search_space_ids)
  let prob_pairs (map [ i -> (list (first i) (list ((last (last i)) / count turtles)))] contagion_id_map)
  ;; normalize the probability measures before returing the resulting list of pairs
  report normalize_probabilities prob_pairs
end

to-report map_id_prob_any_party_listeners_only [start_node]
  let my_political_view [party] of start_node
  let ids [who] of turtles with [role = 0]
  
  let contagion_id_map (map [ [ a b ] -> ( list a  ([abs(polarization-weight)] of turtles with [who = a])) ] ids ids)
  let prob_pairs (map [ i -> (list (first i) (list ((last (last i)) / count turtles)))] contagion_id_map)
  ;; normalize the probability measures before returing the resulting list of pairs
  report normalize_probabilities prob_pairs
end

;; --------------------------------------------------------------------------------------


;; multiply the probability with the contagion of the turtle having the input ID
;; weight MORE the MOST INFECTED nodes
to-report weight_prob_with_contagion [node_pair]
  let node_id first node_pair
  let prob last node_pair
  let contagion_weight [infected] of retrieve_turtle_by_id node_id

  report (contagion_weight + 1) * prob ; +1 to handle contagion = 0
end

;; weight MORE the MOST HEALTHY nodes
to-report weight_prob_with_non_contagion [node_pair]
  let node_id first node_pair
  let prob last node_pair
  let contagion_weight [infected] of retrieve_turtle_by_id node_id

  report ((2 - contagion_weight) + 1) * prob ; +1 to handle contagion = 0
end

;; ------------------------------------------------------------------------------------------------------------------------
;; GENERAL UTILS

to-report get_polarization_distance [node_1 node_2]
  let pol_1 [polarization-weight] of node_1
  let pol_2 [polarization-weight] of node_2
  let pol_diff -1

  ifelse (((pol_1 < 0) and (pol_2 > 0)) or ((pol_1 > 0) and (pol_2 < 0))) [
    set pol_diff ( abs(pol_1) + abs(pol_2) )
  ][
    set pol_diff abs( abs(pol_1) - abs(pol_2) )
  ]

  report pol_diff
end

;; a polarization is considered strong enough
;; if it overcome wavering_weight in absolute value
to-report is_wavering_polarized [this_node]
  let my_pol_degree [polarization-weight] of this_node
  report abs(my_pol_degree) > wavering_weight
end

;; based on the direction of the polarization
;; the wavering user select a political party
to-report get_new_party [this_node]
  let my_pol_degree [polarization-weight] of this_node
  ifelse ( my_pol_degree < 0 ) [
    report 0  ;; democrats
  ][
    report 2  ;; republican
  ]
end

;; normalize the probabilities such that their sum equals 1
to-report normalize_probabilities [probs] ; input == list of pairs [id prob]
  let prob_el_lst map last probs
  let prob_el map last prob_el_lst
  let tot_sum sum prob_el
  report map [ i -> (list (first i) ((last (last i)) / tot_sum)) ] probs
end

;; drop a link
;; drop-resistence --> according to the cluster id
to drop-link [chosen-link]
  ;; drop a random link
  ;let chosen-link one-of links
  ;; die wrt to its resistence
  let resistence-factor ([cluster-noise-factor] of chosen-link)
  if (random-float 1 > resistence-factor)[
    ask chosen-link [die]  ] 

end


to create_link [old-node]
  create-link-with old-node [ 
      ;; default noise behaviour
      set cluster-noise-factor link_resistance
      set thickness 0
    ]
  ;; position the new node near its partner
  move-to old-node
  fd 8
end


;; resize-nodes, change back and forth from size based on degree to a size of 1
to resize-nodes
  ifelse all? turtles [size <= 1]
  [
    ;; a node is a circle with diameter determined by
    ;; the SIZE variable; using SQRT makes the circle's
    ;; area proportional to its degree
    ask turtles [ set size sqrt count link-neighbors ]
  ]
  [
    ask turtles [ set size 1 ]
  ]
end


;; weighted random sampling
to-report assign_cluster
  let weighted_list [[0 0.5] [1 0.3] [2 0.2]]
  
  report first rnd:weighted-one-of-list weighted_list [ [p] -> last p ]
  
end

;; return the number of neighbors of a turtle given its ID
to-report count_neigh [node_id]
  report first [count link-neighbors] of turtles with [who = node_id]
end

;; return the turtle given an identifier
to-report retrieve_turtle_by_id [node_id]
  report one-of turtles with [who = node_id]  ; "one-of" just simulates "first" on an agentset --> the id is unique and so does the result from .. with [who = node_id]
end

to layout
  ;; the number 3 here is arbitrary; more repetitions slows down the
  ;; model, but too few gives poor layouts
  repeat 3 [
    ;; the more turtles we have to fit into the same amount of space,
    ;; the smaller the inputs to layout-spring we'll need to use
    let factor sqrt count turtles
    
    if (factor = 0) [set factor 1]
    
    ;; numbers here are arbitrarily chosen for pleasing appearance
    layout-spring turtles links (1 / factor) (20 / factor) (30 / factor)
    display  ;; for smooth animation
  ]
  ;; don't bump the edges of the world
  let x-offset max [xcor] of turtles + min [xcor] of turtles
  let y-offset max [ycor] of turtles + min [ycor] of turtles
  ;; big jumps look funny, so only adjust a little each time
  set x-offset limit-magnitude x-offset 0.1
  set y-offset limit-magnitude y-offset 0.1
  ask turtles [ setxy (xcor - x-offset / 2) (ycor - y-offset / 2) ]
end

to-report limit-magnitude [number limit]
  if number > limit [ report limit ]
  if number < (- limit) [ report (- limit) ]
  report number
end

